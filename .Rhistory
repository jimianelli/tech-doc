library(FLa4a)
library(XML)
library(reshape2)
data(rfLen)
data(ple4)
source("funs.R")
m(m1)
search()
m1
setMethod("m", "a4aM", function(object, grMod="missing", ...){
args <- list(...)
#if(length(args)==0) args$nocovariateprovided <- TRUE
#browser()
# check variables in models for "age" or "year"
allVars <- c(all.vars(model(shape(object))), all.vars(model(level(object))), all.vars(model(trend(object))))
if("age" %in% allVars) if(!("age" %in% names(args))) args$age <- vecage(object)
if("year" %in% allVars) if(!("year" %in% names(args))) args$year <- vecyear(object)
#if(sum(c("age", "year") %in% allVars)>0){
#	if(!("age" %in% names(args))) args$age <- vecage(object)
#	# else rngmbar(object) <- c(min(args$age), max(args$age))
#	if(!("year" %in% names(args))) args$year <- vecyear(object)
#}
# check if there is a growth model to get K from
if(!missing(grMod)){
k <- c("k","K")[c("k","K") %in% dimnames(params(level(object)))$params]
params(level(object))[k] <- getK(grMod)
}
args$object <- shape(object)
shp <- do.call("predict", args)
args$object <- level(object)
lvl <- do.call("predict", args)
args$object <- trend(object)
trd <- do.call("predict", args)
# build the FLQuant for output
mat <- matrix(1, ncol=6, nrow=3, dimnames=list(model=c("shp","lvl","trd"), dim=c("age","year","unit", "season","area","iter")))
mat["shp",c(1,6)] <- dim(shp)
mat["lvl",c(1,6)] <- dim(lvl)
mat["trd",c(2,6)] <- dim(trd)
dm <- apply(mat,2,max)
nms12 <- list(age="all",year="1")
# a bit spagethi ...
if(!("age" %in% allVars)){
v <- vecage(object)
mat["shp",1] <- dm["age"] <- length(v)
nms12$age <- v
} else {
nms12$age <- args$age
}
if(!("year" %in% allVars)){
v <- vecyear(object)
dm["year"] <- length(v)
nms12$year <- v
} else {
nms12$year <- args$year
}
flq <- FLQuant(NA, dim=dm)
dimnames(flq)[1:2] <- nms12
flqs <- flq
flqs[] <- shp
flql <- aperm(flq, c(6,1,2,3,4,5))
flql[] <- lvl
flql <- aperm(flql,c(2,3,4,5,6,1))
flqt <- aperm(flq, c(2,6,1,3,4,5))
flqt[] <- trd
flqt <- aperm(flqt, c(3,1,4,5,6,2))
m <- flqs*flql*flqt/quantMeans(flqs[as.character(vecmbar(object))])[rep(1,dm[1])]
FLQuant(m)
})
showClass("a4aM")
search()
source("../../packages/FLa4a/R/a4aM-class.R")
q()
library(knitr)
install.packages("knitr")
library(knitr)
knit2pdf('a4aAssessmentMethodology.Rnw')
q()
